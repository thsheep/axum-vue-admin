//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_groups")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_group_id: i32,
    pub user_group_uuid: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_roles::Entity")]
    GroupRoles,
    #[sea_orm(has_many = "super::user_group_members::Entity")]
    UserGroupMembers,
}

impl Related<super::group_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupRoles.def()
    }
}

impl Related<super::user_group_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroupMembers.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::group_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::group_roles::Relation::UserGroups.def().rev())
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_group_members::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_group_members::Relation::UserGroups.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
