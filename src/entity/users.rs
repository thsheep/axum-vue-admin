//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: i32,
    pub user_uuid: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(unique)]
    pub username: String,
    pub alias: Option<String>,
    #[sea_orm(unique)]
    pub email: String,
    pub phone: Option<String>,
    pub password: String,
    pub dept_id: i32,
    #[sea_orm(custom_type="i8")]
    pub is_active: bool,
    pub avatar: Option<String>,
    pub last_login: Option<DateTime>,
    pub reset_token: Option<String>,
    pub reset_triggered: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cedar_policy_set::Entity")]
    CedarPolicySet,
    #[sea_orm(
        belongs_to = "super::departments::Entity",
        from = "Column::DeptId",
        to = "super::departments::Column::DeptId",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Departments,
    #[sea_orm(has_many = "super::user_group_members::Entity")]
    UserGroupMembers,
    #[sea_orm(has_many = "super::user_roles::Entity")]
    UserRoles,
}

impl Related<super::cedar_policy_set::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CedarPolicySet.def()
    }
}

impl Related<super::departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Departments.def()
    }
}


impl Related<super::user_group_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroupMembers.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}


impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_roles::Relation::Users.def().rev())
    }
}

impl Related<super::user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_group_members::Relation::UserGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_group_members::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

