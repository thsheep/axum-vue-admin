//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "template_links")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub link_id: i32,
    pub link_uuid: String,
    pub template_uuid: String,
    pub principal_uid: String,
    pub resource_uid: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cedar_policy_set::Entity",
        from = "Column::TemplateUuid",
        to = "super::cedar_policy_set::Column::PolicyUuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    CedarPolicySet,
}

impl Related<super::cedar_policy_set::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CedarPolicySet.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::cedar_policy_set::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::cedar_policy_set::Relation::TemplateLinks.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
